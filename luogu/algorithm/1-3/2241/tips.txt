在 $C++ $中，整数类型的大小和范围并不是由语言本身直接定义的，而是依赖于实现（即编译器和运行平台）。这是因为 $C++ $想要在不同的硬件平台上都能工作，而不同的硬件平台可能有不同的字长和特性。

不过，$C++ $标准规定了最小范围。以下是各种整数类型的最小范围：

int：至少16位，通常在32位系统上是32位，在64位系统上也通常是32位。
unsigned int：与 int 同样的大小，但因为是无符号的，所以范围是从 0 到 UINT_MAX。
long：至少32位，通常在32位系统上是32位，在64位系统上可能是64位（尤其是在UNIX和Linux系统上）。
unsigned long：与 long 同样的大小，但是无符号。
long long：至少64位。
unsigned long long：与 long long 同样的大小，但是无符号。
short：至少16位。
unsigned short：与 short 同样的大小，但是无符号。
在实践中，大多数现代编译器遵循以下大小（但这在不同的编译器和平台上可能有所不同）：

int：32位，范围大约是 -2,147,483,648 到 2,147,483,647。
unsigned int：32位，范围大约是 0 到 4,294,967,295。
long（在32位系统上）：32位，范围与 int 相同。
unsigned long（在32位系统上）：32位，范围与 unsigned int 相同。
long（在64位系统上，尤其是UNIX和Linux系统上）：64位，范围大约是 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807。
unsigned long（在64位系统上）：64位，范围大约是 0 到 18,446,744,073,709,551,615。
long long：64位，范围与64位 long 相同。
unsigned long long：64位，范围与64位 unsigned long 相同。
short：16位，范围大约是 -32,768 到 32,767。
unsigned short：16位，范围大约是 0 到 65,535。
选择哪种类型取决于您需要存储的数值大小。以下是一些通用的指导：

如果您的数值不会超过 65,535，并且不会是负数，可以使用 unsigned short。
如果您的数值在 -32,768 到 32,767 之间，可以使用 short。
如果您的数值不会超过 4,294,967,295，并且不会是负数，可以使用 unsigned int。
对于大多数日常用途，int 往往是足够的，它可以存储 -2,147,483,648 到 2,147,483,647 的数值。
如果您的数值可能会非常大（超过 int 或 unsigned int 的范围），可以使用 long long 或 unsigned long long。
在64位平台上，如果您需要的数值范围在 -9,223,372,036,854,775,808 到 9,223,372,036,854,775,807 之间，
long 或 long long 是合适的选择。
如果您需要的数值范围在 0 到 18,446,744,073,709,551,615 之间，则选择 unsigned long 或 unsigned long long。
在选择类型时，还应考虑到可移植性。如果您的程序需要在不同的平台上编译运行，最好使用固定大小的整数类型，
例如 int16_t, uint32_t, int64_t, uint64_t 等，这些类型定义在 <cstdint> 头文件中，并且它们的大小和范围是固定的，不依赖于平台。

记住，使用更大的类型意味着更大的内存和潜在的性能成本，尤其是在大型数组或数据结构中。
因此，选择正确的数据类型对于性能和内存效率至关重要。

